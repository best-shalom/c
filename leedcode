1.                  class Solution {
                    public:
                        vector<int> twoSum(vector<int>& nums, int target) {
                            int n=nums.size();
                            int i,j;
                            for(i=0;i<n;i++)
                            {
                                for(j=i+1;j<n;j++)
                                {
                                    if(nums[i]+nums[j]==target)
                                    return {i,j};
                                }
                            }
                            return {};
                        }
                    };




2.                  class Solution {
                    public:
                        vector<int> twoSum(vector<int>& nums, int target) {
                            int n = nums.size();
                            for (int i = 0; i < n; ++i) {
                                for (int j = i + 1; j < n; ++j) {
                                    if (nums[i] + nums[j] == target) {
                                        return {i, j};
                                    }
                                }
                            }
                            return {};
                        }
                    };                                                                    //!!!竟然还是这道题






3.                  class Solution {
                    public:
                        int pivotIndex(vector<int>& nums) {
                            int s1=0,s2=0,i,n;
                            n=nums.size();
                            for(i=0;i<n;i++)        //从0开始对每一个a[i]判断是否符合索引条件
                            {
                                if(i==0)
                                {
                                    for(int c=1;c<n;c++)
                                    {
                                        s2+=nums[c];    //求和判断后续数字是否为0
                                    }
                                    if(s2==0)
                                    {
                                        cout<<0;
                                        return 0;        //直接结束程序,否则进行后续判断
                                    }
                                    s2=0;
                                }
                                else
                                {
                                    for(int a=0;a<i;a++) //统计左边
                                    {
                                        s1+=nums[a];
                                    }
                                    for(int b=i+1;b<n;b++) //统计右边
                                    {
                                        s2+=nums[b];
                                    }
                                    if(s1==s2)             //直接输出最左侧的索引，结束程序
                                    {
                                        cout<<i;
                                        return 0;
                                    }
                                    s1=0,s2=0;             //初始化
                                }
                            }
                            cout<<-1;                      //如果都不满足就输出-1
                            return 0;
                        }
                    };






4.                  class Solution {
                    public:
                        int pivotIndex(vector<int>& nums) {
                        int s1=0,s2=0,n=nums.size();
                        for(int a=1;a<n;a++)
                        s2+=nums[a];
                        for(int i=0;i<n;i++)
                        {
                            if(s1==s2)
                            return i;
                            s1+=nums[i];
                            s2-=nums[i+1];
                        }
                        return -1;
                        }
                    };
                    




5.                  class Solution {
                    public:
                        int searchInsert(vector<int>& nums, int target) {
                            int i,n=nums.size();
                            for(i=0;i<n;i++)                   //查找是否存在相同值
                            {
                                if(target==nums[i])
                                return i;
                            }
                            for(i=0;i<n;i++)                   //此时为不存在的情况，开始插入
                            {
                                if(target<nums[i])
                                return i;
                            }
                            return n;                           //插入到数组末尾的情况
                        }
                    };
                    
                    
                    
                    
                    
                    
                    
                    
                    
6.                  class Solution {
                    public:
                        void rotate(vector<vector<int>>& matrix) {
                            int n=matrix.size();           //矩阵为n*n
                            auto a=matrix;
                            for(int i=0;i<n;i++)           
                            {
                                for(int j=0;j<n;j++)    //旋转
                                {
                                   a[j][n-i-1]=matrix[i][j];   //将旋转后的结果存到a数组
                                }
                            }
                            matrix=a;
                        }
                    };





7.                  class Solution {
                    public:
                        void setZeroes(vector<vector<int>>& matrix) {
                            int n=matrix.size(),m=matrix[0].size();              //n表示行数,m表示列数
                            auto matrix_new=matrix;
                            for(int i=0;i<n;i++)
                            {
                                for(int j=0;j<m;j++)
                                {
                                    if(matrix[i][j]==0)          //对new执行清零操作
                                    {
                                        for(int k=0;k<n;k++)
                                        {
                                            matrix_new[k][j]=0;
                                        }
                                        for(int k=0;k<m;k++)
                                        {
                                            matrix_new[i][k]=0;
                                        }
                                    }
                                }
                            }
                            matrix=matrix_new;
                        }
                    };



8.                  class Solution {
                    public:
                        bool containsDuplicate(vector<int>& nums) {
                            sort(nums.begin(),nums.end());                               //排序 sort(n.begin(),n.end());
                            for(int i=0;i<nums.size()-1;i++)                             //判断数组长度的函数  n.size()
                            {
                                if(nums[i]==nums[i+1])
                                    return true;
                            }
                            return false;
                        }
                    };
                    
                    
                    
                    
                    
                    
9.                  class Solution {
                    public:
                        int maxSubArray(vector<int>& nums) {
                            int n=nums.size();
                            int Max=INT_MIN;                             //这个式子代表一个神奇的极小数(-2147483648)
                            for(int i=0;i<n;i++)
                            {
                                int sum=0;                               //对每一个nums[i]开头的连续子数组求最大和
                                for(int j=i;j<n;j++)
                                {
                                    sum+=nums[j];
                                    if(sum>Max)
                                    {
                                        Max=sum;
                                    }
                                }
                            }
                            return Max;
                        }
                    };





10.                 /**
                     * Definition for a binary tree node.
                     * struct TreeNode {
                     *     int val;
                     *     TreeNode *left;
                     *     TreeNode *right;
                     *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                     * };
                     */
                    class Solution {
                    public:
                       void order(TreeNode *root, vector<int> &res)
                        {
                            if (!root)
                                return;
                            order(root->left, res);
                            res.push_back(root->val);
                            order(root->right, res);
                        }
                        vector<int> inorderTraversal(TreeNode *root)
                        {
                            vector<int> res;
                            order(root, res);
                            return res;
                        }
                    };






11.                 class Solution {
                    public:
                        vector<int> inorderTraversal(TreeNode* root) {
                            vector<int> ans;
                            stack<TreeNode*> S;
                            while (root|| !S.empty())                  //如果最下面的root->right为空,则对栈顶继续进行操作(栈顶root2对应的为root1的中结点)
                            {
                                while (root)
                                {
                                    S.push(root);                      //不断把左子树push入栈,直到左侧无子树(此时root->left==NULL)
                                    root = root->left;
                                }
                                root = S.top();                        //此处root为最左侧子树
                                S.pop();                               //将root弹出
                                ans.push_back(root->val);              //将root存入数据
                                root = root->right;                    //开始判断root->right(可能有值也可能为NULL)
                            }
                            return ans;
                        }
                    };





12.                 class Solution {
                    public:
                        vector<int> inorderTraversal(TreeNode* root) {
                            vector<int> ans;
                            stack<TreeNode*> S;
                            while (root|| !S.empty())                  //如果最下面的root->right为空,则对栈顶继续进行操作(栈顶root2对应的为root1的中结点)
                            {
                                while (root)
                                {
                                    S.push(root);                      //不断把左子树push入栈,直到左侧无子树(此时root->left==NULL)
                                    root = root->left;
                                }
                                root = S.top();                        //此处root为最左侧子树
                                S.pop();                               //将root弹出
                                ans.push_back(root->val);              //将root存入数据
                                root = root->right;                    //开始判断root->right(可能有值也可能为NULL)
                            }
                            return ans;
                        }
                    };





13.                 class Solution {
                    public:
                        vector<int> twoSum(vector<int>& nums, int target) {
                            int i,j;
                            for(i=0;i<nums.size()-1;i++)
                            {
                                for(j=i+1;j<nums.size();j++)
                                {
                                    if(nums[i]+nums[j]==target)
                                    {
                                        return {i,j};
                                    }
                                }
                            }
                            return {i,j};
                        }
                    };



14.                 /**
                   * Definition for singly-linked list.
                   * struct ListNode {
                   *     int val;
                   *     ListNode *next;
                   *     ListNode() : val(0), next(nullptr) {}
                   *     ListNode(int x) : val(x), next(nullptr) {}
                   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
                   * };
                   */
                  class Solution {
                  public:
                      ListNode* reverseList(ListNode* head) {
                          ListNode* p=head;
                          ListNode* q=head;
                          int num=0,t;
                          if(head==NULL)
                          {
                              return NULL;
                          }
                          while(q)                                //计算链表结点数
                          {
                              q=q->next;
                              num++;
                          }
                          while(p->next!=q&&p!=q)
                          {
                              q=head;
                              for(int i=0;i<num-1;i++)
                              {
                                  q=q->next;                      //找到最后一个结点,与p进行交换
                              }
                              t=q->val;
                              q->val=p->val;
                              p->val=t;
                              p=p->next;                          //p后移,q前移
                              num--;
                          }
                          return head;
                      }
                  };




15.               /**
                   * Definition for singly-linked list.
                   * struct ListNode {
                   *     int val;
                   *     ListNode *next;
                   *     ListNode() : val(0), next(nullptr) {}
                   *     ListNode(int x) : val(x), next(nullptr) {}
                   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
                   * };
                   */
                  class Solution {
                  public:
                      ListNode* removeElements(ListNode* head, int val) {
                          ListNode* result=new ListNode(-1);
                          ListNode* p=result;
                          ListNode* s=NULL;
                          result->next=head;                               //给原链表添加一个空头结点,方便对原头结点进行删除操作
                          while(p->next)
                          {
                              if(p->next->val==val)
                              {
                                 s=p->next;
                                 p->next=p->next->next; 
                                 delete s;
                              }
                              else
                              {
                                  p=p->next;
                              }
                          }
                          return result->next;
                      }
                  };



16.               /**
                   * Definition for singly-linked list.
                   * struct ListNode {
                   *     int val;
                   *     ListNode *next;
                   *     ListNode() : val(0), next(nullptr) {}
                   *     ListNode(int x) : val(x), next(nullptr) {}
                   *     ListNode(int x, ListNode *next) : val(x), next(next) {}
                   * };
                   */
                  class Solution {
                  public:
                      ListNode* deleteDuplicates(ListNode* head) {
                          ListNode* ptr=head;
                          ListNode* s=NULL;
                          if(head==NULL||head->next==NULL)
                          {
                              return head;
                          }
                          while(ptr->next)
                          {
                              if(ptr->val==ptr->next->val)
                              {
                                  s=ptr->next;
                                  ptr->next=ptr->next->next;
                                  delete s;
                              }
                              else
                              {
                                  ptr=ptr->next;
                              }
                          }
                          return head;
                      }
                  };




17.               class Solution {
                  public:
                      bool isValid(string s) {
                          stack<int> S;
                          for(int i=0;i<s.size();i++)
                          {
                              if(s[i]=='(')
                                  S.push(')');
                              else if(s[i]=='[')
                                  S.push(']');
                              else if(s[i]=='{')
                                  S.push('}');
                              else if(S.empty()||S.top()!=s[i])
                                  return false; 
                              else
                                  S.pop();
                          }
                          return S.empty();
                      }
                  };
                  /*
                  第一种情况：已经遍历完了字符串，但是栈不为空，说明有相应的左括号没有右括号来匹配，所以return false

                  第二种情况：遍历字符串匹配的过程中，发现栈里没有要匹配的字符。所以return false

                  第三种情况：遍历字符串匹配的过程中，栈已经为空了，没有匹配的字符了，说明右括号没有找到对应的左括号return false
                  */




18.               /**
                   * Definition for a binary tree node.
                   * struct TreeNode {
                   *     int val;
                   *     TreeNode *left;
                   *     TreeNode *right;
                   *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                   *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                   *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                   * };
                   */
                  class Solution {
                  public:
                      bool isSymmetric(TreeNode* root) {
                          return is(root->left,root->right);
                      }
                      bool is(TreeNode* p,TreeNode* q)
                      {
                          if(p==NULL&&q==NULL)
                              return true;
                          else if(p==NULL||q==NULL)
                              return false;
                          else if(p->val==q->val)
                              return is(p->left,q->right)&&is(p->right,q->left);
                          else 
                              return false;
                      }
                  };
                  /*
                  对于此题： 递归的点怎么找？从拿到题的第一时间开始，思路如下：

                  1.怎么判断一棵树是不是对称二叉树？ 答案：如果所给根节点，为空，那么是对称。如果不为空的话，当他的左子树与右子树对称时，他对称

                  2.那么怎么知道左子树与右子树对不对称呢？在这我直接叫为左树和右树 答案：如果左树的左孩子与右树的右孩子对称，左树的右孩子与右树的左孩子对称，那么这个左树和右树就对称。
                  */




19.                 /**
                     * Definition for a binary tree node.
                     * struct TreeNode {
                     *     int val;
                     *     TreeNode *left;
                     *     TreeNode *right;
                     *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                     * };
                     */
                    class Solution {
                    public:
                        bool isSameTree(TreeNode* p, TreeNode* q) {
                            if(p==NULL&&q==NULL)
                                return true;
                            else if(p==NULL||q==NULL)
                                return false;
                            else if(p->val!=q->val)
                                return false;
                            return isSameTree(p->left,q->left)&&isSameTree(p->right,q->right);
                        }
                    };




20.                 /**
                     * Definition for a binary tree node.
                     * struct TreeNode {
                     *     int val;
                     *     TreeNode *left;
                     *     TreeNode *right;
                     *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                     * };
                     */
                    class Solution {
                    public:
                        TreeNode* sortedArrayToBST(vector<int>& nums) {

                            return sortedArrayToBST(nums,0,nums.size()-1);
                        }
                        TreeNode* sortedArrayToBST(vector<int>& nums,int l,int r)
                        {
                            if(r<l)
                                return NULL;
                            int mid=l+(r-l)/2;
                            TreeNode* root=new TreeNode(nums[mid]);
                            root->left=sortedArrayToBST(nums,l,mid-1);
                            root->right=sortedArrayToBST(nums,mid+1,r);
                            return root;
                        }
                    };




21.                 /**
                     * Definition for a binary tree node.
                     * struct TreeNode {
                     *     int val;
                     *     TreeNode *left;
                     *     TreeNode *right;
                     *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
                     *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
                     * };
                     */
                    class Solution {
                    public:
                    int Height(TreeNode* root)                                 //求高度
                        {
                           if(root==NULL)
                               return 0; 
                           return 1+max(Height(root->left),Height(root->right));
                        }
                        bool isBalanced(TreeNode* root) {
                            if(root==NULL)
                                return true;
                            int h1=Height(root->left);
                            int h2=Height(root->right);
                            if(h1-h2>1||h1-h2<-1)
                                return false;
                            return isBalanced(root->right)&&isBalanced(root->left);
                        }
                    };





22.                 class Solution {
                    public:
                        TreeNode* invertTree(TreeNode* root) {
                            if(root==NULL)
                            {
                                return NULL;
                            }
                            TreeNode* t;
                            t=root->left;
                            root->left=root->right;
                            root->right=t;
                            invertTree(root->left);
                            invertTree(root->right);
                            return root;
                        }
                    };
                    
                    
                    
                    
23.                 /*
                   输入 [2,null,3,null,4,null,5,null,6]
                  预期结果 5
                   */
                  class Solution {
                  public:
                      int minDepth(TreeNode* root) {
                          if(root==NULL)
                              return 0;
                          if(root->left==NULL&&root->right!=NULL)
                              return 1+minDepth(root->right);
                          if(root->left!=NULL&&root->right==NULL)
                              return 1+minDepth(root->left);
                          return min(minDepth(root->left),minDepth(root->right))+1;
                      }
                  };





24.               class Solution {
                  public:
                      bool hasPathSum(TreeNode* root, int targetSum) {
                          if(root==NULL)
                              return false;
                          if(root->left==NULL&&root->right==NULL)
                              return targetSum==root->val;
                          return hasPathSum(root->left,targetSum-root->val)||hasPathSum(root->right,targetSum-root->val);
                      }
                  };






25.               class Solution {
                  public:
                      void Tree(TreeNode* root,string p,vector<string>& paths)
                      {
                          if(root!=NULL)
                          {
                              p+=to_string(root->val);
                              if(root->left==NULL&&root->right==NULL)        //已经遍历到了叶子结点,将结果放到paths中
                                  paths.push_back(p);
                              else
                              {
                                  p+="->";                                   //不是叶子结点,递归
                                  Tree(root->left,p,paths);
                                  Tree(root->right,p,paths);
                              }                
                          }
                      }
                      vector<string> binaryTreePaths(TreeNode* root) {
                          vector<string> paths;
                          Tree(root,"",paths);
                          return paths;
                      }
                  };





26.               class Solution {
                  public:
                      int sumOfLeftLeaves(TreeNode* root) {
                          int k=0;
                          if(root==NULL)
                              return 0;
                          if(root->left!=NULL&&root->left->left==NULL&&root->left->right==NULL)   //判断为root->left为左叶子结点
                              k+=root->left->val;
                          return sumOfLeftLeaves(root->right)+sumOfLeftLeaves(root->left)+k;
                      }
                  };




27.                /*
                   题目分析:
                   对每个结点遍历其左子树+右子树+自身=通过它的路径长度
                   DepRoot=Depth(root->left)+Depth(root->right)+1
                   再通过result=max(result,DepRoot)不断更新更大的result,最终返回最大的result
                   */

                  class Solution {
                      int result;
                      int Depth(TreeNode* root)                           //Depth是用来求左右子树深度的,全局变量result才是求结果的
                      {
                          if(root==NULL)
                          {
                              return 0;
                          }
                          int L=Depth(root->left);
                          int R=Depth(root->right);
                          result=max(L+R+1,result);
                          return max(L,R)+1;                              //最大子树深度
                      }
                  public:
                      int diameterOfBinaryTree(TreeNode* root) 
                      {
                          result=1;                                       //这里直接调用result,而不是int result=1?
                          Depth(root);
                          return result-1;
                      }
                  };





28.               class Solution {
                  public:
                      int Num(TreeNode* root,int sum)
                      {
                          if(root==NULL)
                          {
                              return 0;
                          }
                          sum=(sum<<1)+root->val;                                //这里二进制的更新!!(也可以直接sum=sum*2+root->val)
                          if(root->left==NULL&&root->right==NULL)                //表示为子树
                          {
                              return sum;
                          }
                          return Num(root->left,sum)+Num(root->right,sum);
                      }

                      int sumRootToLeaf(TreeNode* root) 
                      {
                          return Num(root,0);
                      }
                  };







29.               /*
                  题目分析:
                  对于二叉搜索树,左子树值小于根节点,右子树值大于根节点
                  那么对于两个不同的目标值,如果均大于或小于某结点,则可以共同进行下去;
                  否则将会发生分叉歧路,则由题意可知该分叉点为两者的公共祖先
                  */

                  class Solution {
                  public:
                      TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
                          TreeNode* ptr=root;
                          while(1)
                          {
                              if(p->val<ptr->val&&q->val<ptr->val)              //两者均小于结点,向左走
                              {
                                  ptr=ptr->left;
                              }
                              else if(p->val>ptr->val&&q->val>ptr->val)         //两者均大于结点,向右走
                              {
                                  ptr=ptr->right;
                              } 
                              else                                              //说明发生分叉,结束循环,输出当前结点
                              { 
                                  break;
                              }
                          }
                          return ptr;
                      }
                  };






30.               class Solution {
                  public:
                  int ans,num,maxans;
                  vector<int> result;
                  void update(int x)                            //对于中序遍历得到的数进行统计更新--新的众数
                  {
                      if(x==num)
                          ans++;
                      else                                     //否则为一个新的数,重新判断它是否为最大众数
                      {
                          num=x;
                          ans=1;
                      }
                      if(ans==maxans)                          //多个众数
                      {
                          result.push_back(num);
                      }
                      else if(ans>maxans)                      //出现了新的最大众数
                      {
                          maxans=ans;
                          result=vector<int> {num};
                      }
                  }
                  void Pass(TreeNode* root)                    //二叉搜索树的中序遍历得到有序数组
                  {
                      if(root==NULL)
                          return;
                      Pass(root->left);
                      update(root->val);
                      Pass(root->right);
                  }

                  vector<int> findMode(TreeNode* root) {
                      Pass(root);
                      return result;
                  }
              };





31.           class Solution {
              public:
                  int maxDepth(Node* root) {
                      if(root==NULL)
                          return 0;
                      int Depth=0;
                      for(int i=0;i<root->children.size();i++)
                      {
                          Depth=max(Depth,maxDepth(root->children[i]));
                      }
                      return Depth+1;
                  }
              };







32.           class Solution {
              public:
                  int search(vector<int>& nums, int target) {
                      int l=0;
                      int r=nums.size()-1;
                      while(l<=r)
                      {
                          int mid=l+(r-l)/2;
                          if(target<nums[mid])
                              r=mid-1;
                          else if(target>nums[mid])
                              l=mid+1;
                          else if(target==nums[mid])
                              return mid;
                      }
                      return -1;        
                  }     
              };





33.           class Solution {
              public:
                  int searchInsert(vector<int>& nums, int target) {
                      int l=0;
                      int r=nums.size()-1;
                      while(l<=r)
                      {
                          int mid=l+(r-l)/2;
                          if(target<nums[mid])
                              r=mid-1;
                          else if(target>nums[mid])
                              l=mid+1;
                          else if(target==nums[mid])
                              return mid;
                      }
                      return l;
                  }
              };




34.           class Solution {
              public:
                  int searchInsert(vector<int>& nums, int target) {
                      for(int i=0;i<nums.size();i++)
                      {
                          if(nums[i]>=target)
                              return i;
                      }
                      return nums.size();
                  }
              };



35.           class Solution {
              public:
                  vector<int> searchRange(vector<int>& nums, int target) 
                  {
                      vector<int> a(2,-1);
                      for(int i=0;i<nums.size();i++)
                      {
                          if(nums[i]==target)
                          {
                              a[0]=i;
                              break;
                          }
                      }
                      for(int j=nums.size()-1;j>=0;j--)
                      {
                          if(nums[j]==target)
                          {
                              a[1]=j;
                              break;
                          }
                      }
                      return a;
                  }
              };




36.           class Solution {
              public:
                  int mySqrt(int x) 
                  {
                      int l=0;
                      int r=x;
                      long long mid=l+(r-l)/2;
                      while(l<r)
                      {

                          if(mid*mid==x)
                              return mid;
                          else if(mid*mid<x)
                          {
                              l=mid+1;
                              mid=l+(r-l)/2;
                          }

                          else if(mid*mid>x)
                          {
                              r=mid-1;
                              mid=l+(r-l)/2;
                          }
                      }
                      if(mid*mid>x)
                          mid--;
                      return mid;
                  }
              };




37.           class Solution {
              public:
                  int mySqrt(int x) 
                  {
                      long long t=0;
                      while(t*t<=x)
                          t++;
                      return t-1;
                  }
              };






38.           class Solution {
              public:
                  int removeElement(vector<int>& nums, int val)
                  {
                      int len=nums.size();
                      for(int i=0;i<len;i++)
                      {
                          if(nums[i]==val)
                          {
                              for(int j=i+1;j<len;j++)
                              {
                                  nums[j-1]=nums[j];
                              }
                              i--;                                             //注意这里i--,因为下表i以后的数值都向前移动了一位，所以i也向前移动一位
                              len--;
                          }
                      }
                      return len;
                  }
              };





39.           
